import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt # 输出结果可视化的模块


def add_layer(inputs, in_size, out_size, activation_function=None):
    Weights = tf.Variable(tf.random_normal([in_size, out_size]))
    biases = tf.Variable(tf.zeros([1, out_size]) + 0.1)
    Wx_plus_b = tf.matmul(inputs, Weights) + biases
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    return outputs

# Make up some real data
x_data = np.linspace(-1, 1, 300)[:, np.newaxis]
noise = np.random.normal(0, 0.05, x_data.shape)
y_data = np.square(x_data) - 0.5 + noise

##plt.scatter(x_data, y_data)
##plt.show()

# define placeholder for inputs to network
xs = tf.placeholder(tf.float32, [None, 1])
ys = tf.placeholder(tf.float32, [None, 1])
# add hidden layer
l1 = add_layer(xs, 1, 10, activation_function=tf.nn.relu)
# add output layer
prediction = add_layer(l1, 10, 1, activation_function=None)

# the error between prediction and real data
loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction), reduction_indices=[1]))
train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
# important step
sess = tf.Session()
# tf.initialize_all_variables() no long valid from
# 2017-03-02 if using tensorflow >= 0.12
if int((tf.__version__).split('.')[1]) < 12 and int((tf.__version__).split('.')[0]) < 1:
    init = tf.initialize_all_variables()
else:
    init = tf.global_variables_initializer()
sess.run(init)

# 构建图形，用散点图描述真实数据之间的关系。
# （注意：plt.ion()用于连续显示。）
# plot the real data
fig = plt.figure()   # 先生成一个图片框
ax = fig.add_subplot(1,1,1) #111 是编号
ax.scatter(x_data, y_data) #真实的数据用点的形式先plot上来
plt.ion()  #本次运行请注释，全局运行不要注释
plt.show() # plt 只能plot一次，把它输上去以后呢，它是把整个程序暂停了
           # 若你想连续的plot呢，需要输入：plt.ion()，让整个程序plot以后呢
           #不暂停，show以后呢，不暂停，继续往下走这个主程序
           # plt.show(block = False) 但新版的python 3.5以后需要用到plt.ion()来代替


#接下来，我们来显示预测数据。
#每隔50次训练刷新一次图形，用红色、宽度为5的线来
# 显示我们的预测数据和输入之间的关系，并暂停0.1s。

for i in range(1000):
    # training
    sess.run(train_step, feed_dict={xs: x_data, ys: y_data})
    if i % 50 == 0:
        # to visualize the result and improvement
        try:
            ax.lines.remove(lines[0]) #先抹除掉line里面第一条线，
                        # 第一次没有线可以抹除很可能要报错，所以用try
                        # 先忽略第一次的错误，已经生成了这个lines以后呢，
                        # 我们再抹除它，很紧密的衔接上，再继续plot第二条线
                        # 这就是try的功能
        except Exception:
            pass
        prediction_value = sess.run(prediction, feed_dict={xs: x_data})
        # plot the prediction
        lines = ax.plot(x_data, prediction_value, 'r-', lw=5) # red红色，宽度为5的线代表
        plt.pause(1)  # or change 1 to 0.1,表示暂停0.1s再绘画

        # to see the step improvement
        # print(sess.run(loss, feed_dict={xs: x_data, ys: y_data}))